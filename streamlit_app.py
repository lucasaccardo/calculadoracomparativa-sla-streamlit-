# st.session_state.pecas_temp[numero] √© a sua lista de pe√ßas.
# Ex: [{"nome": "Filtro de √ìleo", "valor": 50.0}, {"nome": "Vela de Igni√ß√£o", "valor": 80.0}]

if st.session_state.pecas_temp[numero]:
    st.write("### üõ†Ô∏è Gerenciar Pe√ßas Adicionadas:")

    # Cria um DataFrame com as pe√ßas para facilitar a visualiza√ß√£o
    df_pecas = pd.DataFrame(st.session_state.pecas_temp[numero])
    df_pecas_display = df_pecas.copy() # Cria uma c√≥pia para exibi√ß√£o
    df_pecas_display["Valor"] = df_pecas_display["valor"].apply(formatar_moeda)
    df_pecas_display.rename(columns={"nome": "Pe√ßa"}, inplace=True)
    
    st.table(df_pecas_display[["Pe√ßa", "Valor"]]) # Mostra a tabela apenas uma vez

    st.markdown("---") # Divisor visual

    # --- A M√ÅGICA ACONTECE AQUI ---
    # Cria uma lista de op√ß√µes para o multiselect a partir dos nomes das pe√ßas
    opcoes_pecas = df_pecas['nome'].tolist()

    # O widget multiselect permite selecionar v√°rias pe√ßas para remover
    pecas_para_remover = st.multiselect(
        "Selecione as pe√ßas que deseja remover:",
        options=opcoes_pecas,
        key=f"multiselect_remover_pecas_{numero}"
    )

    # Bot√£o √∫nico para confirmar a remo√ß√£o
    if st.button(f"üóëÔ∏è Remover Pe√ßas Selecionadas", key=f"botao_remover_{numero}"):
        if not pecas_para_remover:
            st.warning("‚ö†Ô∏è Nenhuma pe√ßa foi selecionada para remo√ß√£o.")
        else:
            # Filtra a lista original, mantendo apenas as pe√ßas que N√ÉO foram selecionadas para remo√ß√£o
            st.session_state.pecas_temp[numero] = [
                peca for peca in st.session_state.pecas_temp[numero] 
                if peca['nome'] not in pecas_para_remover
            ]
            st.success("‚úÖ Pe√ßas removidas com sucesso!")
            st.rerun() # For√ßa a recarga da p√°gina para atualizar a tabela e o multiselect
else:
    st.info("Nenhuma pe√ßa adicionada a este cen√°rio ainda.")
